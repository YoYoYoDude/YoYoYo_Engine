<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1000000</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///pause current music when it's done fading out

audio_pause_sound(global.currentMusic);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>objWorld</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///game checks

if (global.gameStarted)
{
    //handle pausing
    if (global.pauseDelay &lt;= 0) //check if pause delay is active
    {
        if (keyboard_check_pressed(global.pauseButton))
        {
            if (!global.gamePaused)  //game currently not paused, pause the game
            {
                if (!global.noPause)
                {
                    global.gamePaused = true;  //set the game to paused
                    global.pauseDelay = global.pauseDelayLength; //set pause delay
                    
                    instance_deactivate_all(true);  //deactivate everything
                    
                    global.pauseSurf = surface_create(view_wport[0], view_hport[0]);    //create new surface
                    surface_copy(global.pauseSurf,0,0,application_surface);             //copy current screen to it
                }
            }
            else    //game currently paused, unpause the game
            {
                global.gamePaused = false;  //set the game to unpaused
                global.pauseDelay = global.pauseDelayLength;     //set pause delay
                
                instance_activate_all();    //reactivate objects
                
                if (surface_exists(global.pauseSurf))
                    surface_free(global.pauseSurf);         //free the surface
                
                scrSaveConfig();    //save config in case volume levels were changed
                
                io_clear(); //clear input states to prevent possible pause strats/exploits
            }
        }
    }
    else
    {
        global.pauseDelay -= 1;
    }
    
    if (!global.gamePaused) //check if the game is currently paused
    {
        if (keyboard_check_pressed(global.restartButton))
        {
            //stop death sound/music
            audio_stop_sound(global.deathSound);
            audio_stop_sound(global.gameOverMusic);
            
            //resume room music
            audio_resume_sound(global.currentMusic);
            
            ///return to old gain if music is being faded out
            if (global.musicFading)
            {
                global.musicFading = false;
                audio_sound_gain(global.currentMusic,global.currentGain,0);
                alarm[0] = -1;   //reset alarm that pauses music
            }
            
            scrSaveGame(false); //save death/time
            scrLoadGame(false); //load the game
        }
        
        global.timeMicro += delta_time;
        global.time += global.timeMicro div 1000000;
        global.timeMicro = global.timeMicro mod 1000000;
    }
    else    //game is paused, check for volume controls
    {
        if (keyboard_check(global.upButton))
        {
            if (global.volumeLevel &lt; 100)
                global.volumeLevel += 1;
        }
        else if (keyboard_check(global.downButton))
        {
            if (global.volumeLevel &gt; 0)
                global.volumeLevel -= 1;
        }
        
        audio_master_gain(global.volumeLevel/100);  //set master gain
    }
    
    scrSetRoomCaption();    //keep caption updated
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///function keys

if (keyboard_check_pressed(vk_escape))
{
    game_end();
}

if (keyboard_check_pressed(vk_f2))
{
    scrRestartGame();
    exit;
}

if (keyboard_check_pressed(vk_f4) &amp;&amp; !global.gamePaused)    //toggle fullscreen mode
{
    global.fullscreenMode = !global.fullscreenMode;
    
    window_set_fullscreen(global.fullscreenMode);
    
    scrSaveConfig();    //save fullscreen setting
}

if (keyboard_check(vk_control) &amp;&amp; keyboard_check_pressed(ord("M")) &amp;&amp; !global.gamePaused)
{
    //toggle mute music setting
    scrToggleMusic();
    
    scrSaveConfig();    //save mute setting
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///fade current music out
global.musicFading = true;
global.currentGain = audio_sound_get_gain(global.currentMusic);     //get current gain
audio_sound_gain(global.currentMusic,0,1000);                       //fade out music over 1 second

alarm[0] = 50;  //pause music when it's done fading
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///room checks

scrGetMusic();  //find and play the proper music for the current room

room_speed = 50;    //make sure game is running at the correct frame rate
scrSetRoomCaption();    //make sure window caption stays updated
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///initialize everything

//initialize all variables
scrInitializeGlobals();

//load the current config file, sets default config if it doesn't exist
scrLoadConfig();

room_goto_next();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///draw pause screen

if (global.gamePaused)  //check if game is paused to draw the pause screen
{
    draw_clear(c_black);
    
    if (surface_exists(global.pauseSurf))       //check if surface exists before drawing it
        draw_surface(global.pauseSurf,0,0);
    
    draw_set_color(c_black);
    draw_set_alpha(0.4);
    
    draw_rectangle(-1,-1,view_wport[0],view_hport[0],0);    //darken the paused screen
    
    draw_set_alpha(1);
    
    draw_set_color(c_white);
    
    draw_set_halign(fa_center);
    draw_set_font(fDefault30);
    
    draw_text(view_wport[0]/2,view_hport[0]/2 - 24,"PAUSE");
    
    draw_set_halign(fa_left);
    draw_set_font(fDefault18);
    
    var t = global.time;
    var timeText = string(t div 3600) + ":";
    t = t mod 3600;
    timeText += string(t div 600);
    t = t mod 600;
    timeText += string(t div 60) + ":";
    t = t mod 60;
    timeText += string(t div 10);
    t = t mod 10;
    timeText += string(floor(t));
    
    draw_text(20,516,"Volume: " + string(global.volumeLevel) + "%");
    draw_text(20,541,"Deaths: " + string(global.death));
    draw_text(20,566,"Time: " + timeText);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
