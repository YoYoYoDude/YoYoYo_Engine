<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprMovingPlatform</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>1</depth>
  <persistent>0</persistent>
  <parentName>objBlock</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>bounce = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//TODO: upside down

//TODO: there's a strange interaction with very fast moving platforms moving downward at a speed higher than the player's max fall speed where the player can't latch on
//TODO: there's a bug with fast fall speeds and bouncing platforms (set player max vspeed to 50 check the right-most platform)

if (instance_exists(objPlayer)) {
    var dX = x - xprevious;
    var dY = y - yprevious;
    
    var yOffset = 9;
    
    //we're on the platform if we're above/even with the platform or about to rise into it, so check both
    var abovePlatform = false;
    var risingIn = false;
    
    with (instance_place(x,y-1,objPlayer)) {    //instance_place(xprevious,yprevious-1,objPlayer)
        show_debug_message("p");
        
        //player was standing above the platform last frame or is currently over it
        abovePlatform = (yprevious &lt;= other.yprevious - yOffset || y &lt;= other.y - yOffset);
        
        //player was over the platform last frame and is now below it
        //abovePlatform = (yprevious &lt;= other.yprevious - yOffset);
        
        show_debug_message("yprevious = " + string(yprevious));
        show_debug_message("other.yprevious - yOffset = " + string(other.yprevious - yOffset));
        show_debug_message("y = " + string(y));
        show_debug_message("other.y - yOffset = " + string(other.y - yOffset));
    }
    
    //TODO: figure out what the bounds of the rectangle should actually be (also maybe we should be using xprevious/yprevious)
    with (collision_rectangle(x,y-20,x+31,y+20,objPlayer,false,true)) {
        show_debug_message("q");
        
        //player was previously below the platform and is now above it
        risingIn = (yprevious &gt; other.yprevious - yOffset &amp;&amp; y &lt;= other.y - yOffset);
    }
    
    if (abovePlatform || risingIn) {
        show_debug_message("we in there");
        
        with (objPlayer) {
            if (place_free(x,other.y-yOffset)) {
                y = other.y - yOffset;
            }
            if (place_free(x+dX,y)) {
                x += dX;
            }
            
            vspeed = max(dY,0); //only affects player speed when the platform moves down
            djump = 1;
            //onPlatform=true;
        }
    } else {
        show_debug_message("z");
    }
}

if (bounce) {
    move_bounce_solid(false);
    
    /*
    if (!place_free(x,y+vspeed)) {
        vspeed*=-1;
    }
    if (!place_free(x+hspeed,y)) {
        hspeed*=-1;
    }
    */
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
