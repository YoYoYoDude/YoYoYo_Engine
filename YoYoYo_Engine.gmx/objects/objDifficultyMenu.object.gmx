<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//initiailze menu variables

difSelect = false;
select = global.menuSelectPrev[0];
select2 = 0;
xSeperation = 239;
str[0] = "Save 1";
str[1] = "Save 2";
str[2] = "Save 3";
warnText = false;
warnSelect = true;

appleIndex = 0;
playerIndex = 0;

//load save file values

for (var i = 0; i &lt; 3; i++)
{
    if (file_exists("Data\save"+string(i+1)))  //check if current save exists
    {
        //load save data
        exists[i] = true;
        
        //load the save map
        var saveMap;
        
        if (global.extraSaveProtection) //use ds_map_secure function
        {
            saveMap = ds_map_secure_load("Data\save"+string(i+1));
        }
        else    //use text file
        {
            var f = file_text_open_read("Data\save"+string(i+1));
            
            saveMap = json_decode(base64_decode(file_text_read_string(f)));
            
            file_text_close(f);
        }
        
        if (saveMap != -1)  //check if the save map loaded correctly
        {
            death[i] = ds_map_find_value(saveMap,"death");
            if (is_undefined(death[i])) //check for undefined value in case the save was messed with or got corrupted
                death[i] = 0;
            
            time[i] = ds_map_find_value(saveMap,"time");
            if (is_undefined(time[i]))
                time[i] = 0;
    
            difficulty[i] = ds_map_find_value(saveMap,"difficulty");
            if (is_undefined(difficulty[i]))
                difficulty[i] = 0;
            
            for (var j = 0; j &lt; 8; j++)
            {
                boss[j,i] = ds_map_find_value(saveMap,"saveBossItem["+string(j)+"]");
                if (is_undefined(boss[j,i]))
                    boss[j,i] = false;
            }
            
            clear[i] = ds_map_find_value(saveMap,"saveGameClear");
            if (is_undefined(clear[i]))
                clear[i] = false;
            
            ds_map_destroy(saveMap);
        }
        else
        {
            //save map didn't load correctly, set the variables to the defaults
            death[i] = 0;
            time[i] = 0;
            difficulty[i] = 0;
            for (var j = 0; j &lt; 8; j++)
            {
                boss[j,i] = false;
            }
            clear[i] = false;
        }
    }
    else
    {
        exists[i] = false;
        death[i] = 0;
        time[i] = 0;
    }
    
    var t = time[i];
    
    timeStr[i] = string(t div 3600) + ":";
    t = t mod 3600;
    timeStr[i] += string(t div 600);
    t = t mod 600;
    timeStr[i] += string(t div 60) + ":";
    t = t mod 60;
    timeStr[i] += string(t div 10);
    t = t mod 10;
    timeStr[i] += string(floor(t));
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//animate select sprites
appleIndex = (appleIndex + 1/15) mod 2;
playerIndex = (playerIndex + 1/5) mod 4;

if (scrButtonCheckPressed(global.menuOptionsButton))
{
    global.menuSelectPrev[0] = select;
    room_goto(rOptions);
}
else
{
    if (!difSelect)
    {
        if (scrButtonCheckPressed(global.menuLeftButton))
        {
            audio_play_sound(global.menuSound,0,false);
            select -= 1;
            if (select &lt; 0)
                select = 2;
        }
        else if (scrButtonCheckPressed(global.menuRightButton))
        {
            audio_play_sound(global.menuSound,0,false);
            select += 1;
            if (select &gt; 2)
                select = 0;
        }
        else if (scrButtonCheckPressed(global.menuBackButton))
        {
            global.menuSelectPrev[0] = 0;
            room_goto(rTitle);  //go back
        }
        else if (scrButtonCheckPressed(global.menuAcceptButton))
        {
            if (global.menuMode == 0)   //use the difficulty select room to select difficulty
            {
                global.savenum = select+1;
                room_goto(rDifficultySelect);
            }
            else    //use the menu to select difficulty
            {
                difSelect = true;
                if (exists[select]) //check if there is a save in the current slot
                    select2 = -1;   //default to load game
                else
                    select2 = 0;    //default to medium
            }
        }
    }
    else
    {
        if (!warnText)
        {
            if (scrButtonCheckPressed(global.menuLeftButton))
            {
                audio_play_sound(global.menuSound,0,false);
                select2 -= 1;
                if ((select2 == -1 &amp;&amp; !exists[select]) || (select2 &lt; -1))
                    select2 = 3;
            }
            else if (scrButtonCheckPressed(global.menuRightButton))
            {
                audio_play_sound(global.menuSound,0,false);
                select2 += 1;
                if (select2 &gt; 3)
                {
                    if (exists[select])
                        select2 = -1;
                    else
                        select2 = 0;
                }
            }
            else if (scrButtonCheckPressed(global.menuBackButton))
            {
                difSelect = false;
            }
            else if (scrButtonCheckPressed(global.menuAcceptButton))
            {
                global.savenum = select+1;
                
                if (select2 == -1)  //load game
                {
                    if (file_exists("Data\save"+string(global.savenum)))
                        scrLoadGame(true);
                }
                else    //starts new game
                {
                    if (!file_exists("Data\save"+string(global.savenum)))
                    {
                        global.gameStarted = true; //sets game in progress (enables saving, restarting, etc.)
                        global.autosave = true;
                        
                        global.difficulty = select2;
                        
                        room_goto(global.startRoom);
                    }
                    else
                    {
                        warnText = true;
                        warnSelect = true;
                    }
                }
            }
        }
        else
        {
            if (scrButtonCheckPressed(global.menuLeftButton))
            {
                audio_play_sound(global.menuSound,0,false);
                warnSelect = !warnSelect;
            }
            else if (scrButtonCheckPressed(global.menuRightButton))
            {
                audio_play_sound(global.menuSound,0,false);
                warnSelect = !warnSelect;
            }
            else if (scrButtonCheckPressed(global.menuBackButton))
            {
                warnText = false;
            }
            else if (scrButtonCheckPressed(global.menuAcceptButton))
            {
                if (warnSelect)
                {
                    //start new game
                    global.gameStarted = true; //sets game in progress (enables saving, restarting, etc.)
                    global.autosave = true;
                    
                    global.difficulty = select2;
                    
                    if (file_exists("Data\save"+string(global.savenum)))
                        file_delete("Data\save"+string(global.savenum));
                    
                    room_goto(global.startRoom);
                }
                else
                {
                    warnText = false;
                }
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>for(var i = 0; i &lt; 3; i += 1)
{
    draw_set_color(c_black)
    draw_set_halign(fa_left)
    draw_set_font(fDefault30);
    
    draw_text(x+i*xSeperation+2,y,str[i]);
    
    draw_set_font(fDefault12);
    
    draw_text(x+i*xSeperation+10,y+70,"Deaths: "+string(death[i]));
    draw_text(x+i*xSeperation+10,y+90,"Time: "+timeStr[i]);
    
    draw_set_halign(fa_center);
    
    if (difSelect &amp;&amp; i == select)
    {
        if (!warnText)
        {
            if(select2==-1) draw_text(x + i*xSeperation + 65, y+49,"&lt; Load game &gt;");
            else if(select2==0) draw_text(x + i*xSeperation + 65, y+49,"&lt; Medium &gt;");
            else if(select2==1) draw_text(x + i*xSeperation + 65, y+49,"&lt; Hard &gt;");
            else if(select2==2) draw_text(x + i*xSeperation + 65, y+49,"&lt; Very Hard &gt;");
            else if(select2==3) draw_text(x + i*xSeperation + 65, y+49,"&lt; Impossible &gt;");
        }
        else
        {
            draw_text(x+i*xSeperation+63,y-100,"Are you sure#you want to#overwrite this save?")
            if(warnSelect) draw_text(x + i*xSeperation + 65, y+49,"&lt; Yes &gt;");
            else draw_text(x + i*xSeperation + 65, y+49,"&lt; No &gt;");
        }
    }
    
    if (exists[i])
    {        
        if ((!difSelect) || (difSelect &amp;&amp; i != select))
        {
            if(difficulty[i]==0){draw_text(x+i*xSeperation+65,y+49,"Medium")}
            else if(difficulty[i]==1){draw_text(x+i*xSeperation+65,y+49,"Hard")}
            else if(difficulty[i]==2){draw_text(x+i*xSeperation+65,y+49,"Very Hard")}
            else if(difficulty[i]==3){draw_text(x+i*xSeperation+65,y+49,"Impossible")}
        }
        
        draw_set_font(fDefault24);
        
        if(clear[i]){draw_text(x+i*xSeperation+63,y+215,"Clear!!")}
        
        if(boss[0,i]){draw_sprite(sprBossItem,-1,x+i*xSeperation+0,y+128)}
        if(boss[1,i]){draw_sprite(sprBossItem,-1,x+i*xSeperation+32,y+128)}
        if(boss[2,i]){draw_sprite(sprBossItem,-1,x+i*xSeperation+64,y+128)}
        if(boss[3,i]){draw_sprite(sprBossItem,-1,x+i*xSeperation+96,y+128)}
        if(boss[4,i]){draw_sprite(sprBossItem,-1,x+i*xSeperation+0,y+160)}
        if(boss[5,i]){draw_sprite(sprBossItem,-1,x+i*xSeperation+32,y+160)}
        if(boss[6,i]){draw_sprite(sprBossItem,-1,x+i*xSeperation+64,y+160)}
        if(boss[7,i]){draw_sprite(sprBossItem,-1,x+i*xSeperation+96,y+160)}
    }
    else
    {
        if ((!difSelect) || (difSelect &amp;&amp; i != select))
        {
            draw_text(x+i*xSeperation+65,y+49,"No Data");
        }
    }
    
    if (i == select)
    {
        draw_sprite(sprCherry,appleIndex,x+i*xSeperation+5,y+310);
        draw_sprite(sprCherry,appleIndex,x+i*xSeperation+25,y+310);
        draw_sprite(sprCherry,appleIndex,x+i*xSeperation+45,y+310);
        draw_sprite(sprPlayerIdle,playerIndex,x+i*xSeperation+65,y+310);
        draw_sprite(sprCherry,appleIndex,x+i*xSeperation+85,y+310);
        draw_sprite(sprCherry,appleIndex,x+i*xSeperation+105,y+310);
        draw_sprite(sprCherry,appleIndex,x+i*xSeperation+125,y+310);
    }
}

scrDrawButtonInfo(true);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
